Grammar:

Rule 0     S' -> header
Rule 1     header -> columns
Rule 2     header -> columns NEWLINE
Rule 3     columns -> column TAB columns
Rule 4     columns -> column
Rule 5     column -> IDENTIFIER COLON IDENTIFIER
Rule 6     column -> IDENTIFIER COLON IDENTIFIER LPAREN args RPAREN
Rule 7     args -> argument COMMA args
Rule 8     args -> argument
Rule 9     args -> <empty>
Rule 10    argument -> IDENTIFIER EQUALS argval
Rule 11    argval -> QSTRING
Rule 12    argval -> NUMBER
Rule 13    argval -> FLOAT_NUMBER

Terminals, with rules where they appear:

COLON                : 5 6
COMMA                : 7
EQUALS               : 10
FLOAT_NUMBER         : 13
IDENTIFIER           : 5 5 6 6 10
LPAREN               : 6
NEWLINE              : 2
NUMBER               : 12
QSTRING              : 11
RPAREN               : 6
TAB                  : 3
error                : 

Nonterminals, with rules where they appear:

args                 : 6 7
argument             : 7 8
argval               : 10
column               : 3 4
columns              : 1 2 3
header               : 0


state 0

    (0) S' -> . header
    (1) header -> . columns
    (2) header -> . columns NEWLINE
    (3) columns -> . column TAB columns
    (4) columns -> . column
    (5) column -> . IDENTIFIER COLON IDENTIFIER
    (6) column -> . IDENTIFIER COLON IDENTIFIER LPAREN args RPAREN
    IDENTIFIER      shift and go to state 4

    header                         shift and go to state 1
    columns                        shift and go to state 2
    column                         shift and go to state 3

state 1

    (0) S' -> header .


state 2

    (1) header -> columns .
    (2) header -> columns . NEWLINE
    $end            reduce using rule 1 (header -> columns .)
    NEWLINE         shift and go to state 5


state 3

    (3) columns -> column . TAB columns
    (4) columns -> column .
    TAB             shift and go to state 6
    NEWLINE         reduce using rule 4 (columns -> column .)
    $end            reduce using rule 4 (columns -> column .)


state 4

    (5) column -> IDENTIFIER . COLON IDENTIFIER
    (6) column -> IDENTIFIER . COLON IDENTIFIER LPAREN args RPAREN
    COLON           shift and go to state 7


state 5

    (2) header -> columns NEWLINE .
    $end            reduce using rule 2 (header -> columns NEWLINE .)


state 6

    (3) columns -> column TAB . columns
    (3) columns -> . column TAB columns
    (4) columns -> . column
    (5) column -> . IDENTIFIER COLON IDENTIFIER
    (6) column -> . IDENTIFIER COLON IDENTIFIER LPAREN args RPAREN
    IDENTIFIER      shift and go to state 4

    column                         shift and go to state 3
    columns                        shift and go to state 8

state 7

    (5) column -> IDENTIFIER COLON . IDENTIFIER
    (6) column -> IDENTIFIER COLON . IDENTIFIER LPAREN args RPAREN
    IDENTIFIER      shift and go to state 9


state 8

    (3) columns -> column TAB columns .
    NEWLINE         reduce using rule 3 (columns -> column TAB columns .)
    $end            reduce using rule 3 (columns -> column TAB columns .)


state 9

    (5) column -> IDENTIFIER COLON IDENTIFIER .
    (6) column -> IDENTIFIER COLON IDENTIFIER . LPAREN args RPAREN
    TAB             reduce using rule 5 (column -> IDENTIFIER COLON IDENTIFIER .)
    NEWLINE         reduce using rule 5 (column -> IDENTIFIER COLON IDENTIFIER .)
    $end            reduce using rule 5 (column -> IDENTIFIER COLON IDENTIFIER .)
    LPAREN          shift and go to state 10


state 10

    (6) column -> IDENTIFIER COLON IDENTIFIER LPAREN . args RPAREN
    (7) args -> . argument COMMA args
    (8) args -> . argument
    (9) args -> .
    (10) argument -> . IDENTIFIER EQUALS argval
    RPAREN          reduce using rule 9 (args -> .)
    IDENTIFIER      shift and go to state 11

    args                           shift and go to state 12
    argument                       shift and go to state 13

state 11

    (10) argument -> IDENTIFIER . EQUALS argval
    EQUALS          shift and go to state 14


state 12

    (6) column -> IDENTIFIER COLON IDENTIFIER LPAREN args . RPAREN
    RPAREN          shift and go to state 15


state 13

    (7) args -> argument . COMMA args
    (8) args -> argument .
    COMMA           shift and go to state 16
    RPAREN          reduce using rule 8 (args -> argument .)


state 14

    (10) argument -> IDENTIFIER EQUALS . argval
    (11) argval -> . QSTRING
    (12) argval -> . NUMBER
    (13) argval -> . FLOAT_NUMBER
    QSTRING         shift and go to state 18
    NUMBER          shift and go to state 19
    FLOAT_NUMBER    shift and go to state 20

    argval                         shift and go to state 17

state 15

    (6) column -> IDENTIFIER COLON IDENTIFIER LPAREN args RPAREN .
    TAB             reduce using rule 6 (column -> IDENTIFIER COLON IDENTIFIER LPAREN args RPAREN .)
    NEWLINE         reduce using rule 6 (column -> IDENTIFIER COLON IDENTIFIER LPAREN args RPAREN .)
    $end            reduce using rule 6 (column -> IDENTIFIER COLON IDENTIFIER LPAREN args RPAREN .)


state 16

    (7) args -> argument COMMA . args
    (7) args -> . argument COMMA args
    (8) args -> . argument
    (9) args -> .
    (10) argument -> . IDENTIFIER EQUALS argval
    RPAREN          reduce using rule 9 (args -> .)
    IDENTIFIER      shift and go to state 11

    argument                       shift and go to state 13
    args                           shift and go to state 21

state 17

    (10) argument -> IDENTIFIER EQUALS argval .
    COMMA           reduce using rule 10 (argument -> IDENTIFIER EQUALS argval .)
    RPAREN          reduce using rule 10 (argument -> IDENTIFIER EQUALS argval .)


state 18

    (11) argval -> QSTRING .
    COMMA           reduce using rule 11 (argval -> QSTRING .)
    RPAREN          reduce using rule 11 (argval -> QSTRING .)


state 19

    (12) argval -> NUMBER .
    COMMA           reduce using rule 12 (argval -> NUMBER .)
    RPAREN          reduce using rule 12 (argval -> NUMBER .)


state 20

    (13) argval -> FLOAT_NUMBER .
    COMMA           reduce using rule 13 (argval -> FLOAT_NUMBER .)
    RPAREN          reduce using rule 13 (argval -> FLOAT_NUMBER .)


state 21

    (7) args -> argument COMMA args .
    RPAREN          reduce using rule 7 (args -> argument COMMA args .)
